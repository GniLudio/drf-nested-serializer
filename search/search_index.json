{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DRF Nested Serializer","text":"<p>Adds support for writable nested serializers to the Django REST framework.</p> <p>Find out more with the Getting Started guide.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>All relationship types<ul> <li>Including through model</li> </ul> </li> <li>Drop-in replacement</li> <li>Create and update support</li> <li>Flexible field in- and exclusion</li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>from rest_framework.serializers import ModelSerializer\nfrom drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom .models import MyChildModel, MyParentModel\n\nclass MyChildSerializer(ModelSerializer):\n    class Meta:\n        model = MyChildModel\n        fields = (\"id\", \"\")\n\nclass MyParentSerializer(NestedModelSerializer):\n    nested = MyChildSerializer()\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <pre><code>data = {\n    \"child\": {\n        \"name\": \"John Doe\"\n    }\n}\nserializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre> <pre><code>print(MyParentSerializer(instance=instance).data)\n{\n    \"id\": 1,\n    \"child\": {\n        \"id\": 1,\n        \"name\": \"John Doe\"\n    }\n}\n</code></pre>"},{"location":"getting_started/","title":"DRF Getting Started","text":""},{"location":"getting_started/#usage","title":"Usage","text":"<p>A serializer just needs to inherit from <code>NestedModelSerializer</code> to allow writable nested serializers:</p> One to OneOne to One RelForeign KeyMany to One RelMany to ManyMany to Many RelThrough <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer()\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    pass\n\nclass MyParentModel(models.Model):\n    nested = models.OneToOneField(MyNestedModel, on_delete=models.CASCADE)\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer()\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    parent = models.OneToOneField(\"MyParentModel\", on_delete=models.CASCADE, related_name=\"nested\")\n\nclass MyParentModel(models.Model):\n    pass\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer()\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    pass\n\nclass MyParentModel(models.Model):\n    nested = models.ForeignKey(MyNestedModel, on_delete=models.CASCADE)\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer(many=True)\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    parent = models.ForeignKey(\"MyParentModel\", on_delete=models.CASCADE, related_name=\"nested\")\n\nclass MyParentModel(models.Model):\n    pass\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer(many=True)\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    pass\n\nclass MyParentModel(models.Model):\n    nested = models.ManyToManyField(MyNestedModel)\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyNestedModel, MyParentModel\n\nclass MyNestedModelSerializer(ModelSerializer):\n    class Meta:\n        model = MyNestedModel\n        fields = (\"id\", )\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    nested = MyNestedModelSerializer(many=True)\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"nested\")\n</code></pre> <ol> <li>Inherit <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    parent = models.ManyToManyField(MyNestedModel, related_name=\"nested\")\n\nclass MyParentModel(models.Model):\n    pass\n</code></pre> <pre><code>from drf_nested_model_serializer.serializer import NestedModelSerializer\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import MyThroughModel, MyParentModel\n\nclass MyThroughSerializer(ModelSerializer):\n    class Meta:\n        model = MyThroughModel\n        fields = (\"id\", \"nested\")\n\nclass MyParentSerializer(NestedModelSerializer): # (1)\n    through = MyThroughSerializer(many=True)\n\n    class Meta:\n        model = MyParentModel\n        fields = (\"id\", \"through\")\n</code></pre> <ol> <li>Inherit from <code>NestedModelSerializer</code> to allow writable nested serializers (instead of <code>ModelSerializer</code>)</li> </ol> <pre><code>from django.db import models\n\nclass MyNestedModel(models.Model):\n    pass\n\nclass MyParentModel(models.Model):\n    nested = models.ManyToManyField(MyNestedModel, through=\"MyThroughModel\")\n\nclass MyThroughModel(models.Model):\n    nested = models.ForeignKey(MyNestedModel, on_delete=models.CASCADE)\n    parent = models.ForeignKey(MyParentModel, on_delete=models.CASCADE, related_name=\"through\")\n</code></pre>"},{"location":"getting_started/#data","title":"Data","text":"Do nothingSet to <code>None</code>Create new nestedSet to existingSet and update <p><pre><code>data = {\n\n}\n</code></pre> <pre><code>serializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre></p> <p><pre><code>data = {\n    \"nested\": None\n}\n</code></pre> <pre><code>serializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre></p> <p><pre><code>data = {\n    \"nested\": { \"id\": None, \"name\": \"John Doe\"}\n}\n</code></pre> <pre><code>serializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre></p> <p><pre><code>data = {\n    \"nested\": { \"id\": 3 }\n}\n</code></pre> <pre><code>serializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre></p> <p><pre><code>data = {\n    \"nested\": { \"id\": 3, \"name\": \"John Doe\" }\n}\n</code></pre> <pre><code>serializer = MyParentSerializer(data=data)\nif serializer.is_valid():\n    instance = serializer.save()\n</code></pre></p>"},{"location":"getting_started/#inclusion-and-exclusion","title":"Inclusion and Exclusion","text":"<p>If not all nested serializers should be handled, you can explicitly include or exclude fields:</p> Include all (default)Include specificExclude allExclude specific <pre><code>class MyParentSerializer(NestedModelSerializer):\n    ...\n    class Meta:\n        ...\n        nested_include = \"__all__\" # or omitted\n</code></pre> <pre><code>class MyParentSerializer(NestedModelSerializer):\n    ...\n    class Meta:\n        ...\n        nested_include = (\"field_1\", \"field_2\", ...)\n</code></pre> <pre><code>class MyParentSerializer(NestedModelSerializer):\n    ...\n    class Meta:\n        ...\n        nested_exclude = \"__all__\"\n</code></pre> <pre><code>class MyParentSerializer(NestedModelSerializer):\n    ...\n    class Meta:\n        ...\n        nested_exclude = (\"field_1\", \"field_2\", ...)\n</code></pre>"}]}